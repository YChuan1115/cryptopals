#!/usr/bin/env bash

# Prerequisites:
# - Changed to relevant directory for downloading and building dependencies.
# - GNU Bash (at least v3.1 for the '+=' string-concatenation operator).
# - Latest GCC ('gcc' and 'g++') available in PATH.
# - Caller will export BOOST_DIR, GTEST_DIR, HUNSPELL_DIR and CRYPTOPP_DIR.
# - Environment variables:
#   - GNU_MAKE: Executable name of GNU Make (at least v4.2.1).
#   - GIT: Executable name of Git (relatively modern version with submodules).
#   - AR: Executable name of GCC's 'ar' tool. (Unnecessary on macOS.)
#   - RANLIB: Executable name of GCC's 'ranlib' tool. (Unnecessary on macOS.)

function build_boost {
    # The Travis Cache plugin creates the directories beforehand, so we can't
    # use [[ ! -d $dir ]] here
    if [[ ! -x boost/bootstrap.sh ]]
    then
        $GIT clone --jobs 4 https://github.com/boostorg/boost.git
    fi
    pushd boost
    $GIT checkout --force --recurse-submodules master
    $GIT pull --prune --recurse-submodules --jobs 4
    $GIT submodule update --init --recursive --jobs 4
    ./bootstrap.sh
    ./b2 headers
    ./b2 --layout=system variant=release -j 2 --with-system
}

function build_gtest {
    if [[ ! -f googletest/googletest/make/Makefile &&
          ! -f googletest/googletest/make/GNUmakefile ]]
    then
        $GIT clone --jobs 4 https://github.com/google/googletest.git
    fi
    pushd googletest
    $GIT checkout --force --recurse-submodules master
    $GIT pull --prune --recurse-submodules --jobs 4
    $GIT submodule update --init --recursive --jobs 4
    pushd googletest/make
    $GNU_MAKE -kj 2
}

function build_hunspell {
    if [[ ! -f hunspell/configure.ac ]]
    then
        $GIT clone --jobs 4 https://github.com/hunspell/hunspell.git
    fi
    pushd hunspell
    $GIT checkout --force --recurse-submodules master
    $GIT pull --prune --recurse-submodules --jobs 4
    $GIT submodule update --init --recursive --jobs 4
    export LDFLAGS=-L/usr/local/opt/gettext/lib
    export CPPFLAGS=-I/usr/local/opt/gettext/include
    autoreconf -vfi
    ./configure --config-cache
    $GNU_MAKE -kj 2
}

function build_cryptopp {
    if [[ ! -f cryptopp/GNUmakefile ]]
    then
        $GIT clone --jobs 4 https://github.com/weidai11/cryptopp.git
    fi
    pushd cryptopp
    $GIT checkout --force --recurse-submodules master
    $GIT pull --prune --recurse-submodules --jobs 4
    $GIT submodule update --init --recursive --jobs 4
    $GNU_MAKE deps
    $GNU_MAKE -kj 3
}

function download_scowl_for_hunspell {
    url='https://downloads.sourceforge.net/project/wordlist/speller/2017.01.22/'
    url+='hunspell-en_US-2017.01.22.zip?r=https%3A%2F%2Fsourceforge.net%2F'
    url+='projects%2Fwordlist%2Ffiles%2Fspeller%2F2017.01.22%2F&ts=1486860415'
    url+='&use_mirror=vorboss'
    wget "$url" -O hunspell-en_US-2017.01.22.zip
    unzip -o -d hunspell hunspell-en_US-2017.01.22.zip
    rm hunspell-en_US-2017.01.22.zip
}

if [[ "$GIT" == "" ]]
then
    echo "The GIT variable must be set to the Git program name (or to 'true'" \
         "to avoid Git operations)" >&2
    exit 1
elif [[ "$GNU_MAKE" == "" ]]
then
    echo "The GNU_MAKE variable must be set to the GNU Make v4.2.1 program" \
         "name" >&2
    exit 1
fi

set -x
build_boost &
build_gtest &
build_hunspell &
build_cryptopp &
download_scowl_for_hunspell &
wait
